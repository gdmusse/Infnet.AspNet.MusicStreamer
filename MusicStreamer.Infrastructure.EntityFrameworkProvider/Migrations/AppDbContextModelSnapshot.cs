// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MusicStreamer.Infrastructure.EntityFrameworkProvider.Context;

#nullable disable

namespace MusicStreamer.Infrastructure.EntityFrameworkProvider.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BandaUsuario", b =>
                {
                    b.Property<Guid>("BandasFavoritasId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BandasFavoritasId", "UsuarioId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("BandasFavoritas", (string)null);
                });

            modelBuilder.Entity("MusicStreamer.Domain.Entities.Album", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BandaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BandaId");

                    b.ToTable("Albuns", (string)null);
                });

            modelBuilder.Entity("MusicStreamer.Domain.Entities.Assinatura", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataAssinatura")
                        .HasColumnType("datetime2");

                    b.Property<string>("Plano")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId")
                        .IsUnique();

                    b.ToTable("Assinaturas", (string)null);
                });

            modelBuilder.Entity("MusicStreamer.Domain.Entities.Banda", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Bandas", (string)null);
                });

            modelBuilder.Entity("MusicStreamer.Domain.Entities.Musica", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AlbumId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("Duracao")
                        .HasColumnType("time");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.ToTable("Musicas", (string)null);
                });

            modelBuilder.Entity("MusicStreamer.Domain.Entities.Playlist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Playlists", (string)null);
                });

            modelBuilder.Entity("MusicStreamer.Domain.Entities.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Usuarios", (string)null);
                });

            modelBuilder.Entity("MusicaPlaylist", b =>
                {
                    b.Property<Guid>("MusicasId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlaylistId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MusicasId", "PlaylistId");

                    b.HasIndex("PlaylistId");

                    b.ToTable("MusicasPlaylist", (string)null);
                });

            modelBuilder.Entity("MusicaUsuario", b =>
                {
                    b.Property<Guid>("MusicasFavoritasId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MusicasFavoritasId", "UsuarioId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("MusicasFavoritas", (string)null);
                });

            modelBuilder.Entity("BandaUsuario", b =>
                {
                    b.HasOne("MusicStreamer.Domain.Entities.Banda", null)
                        .WithMany()
                        .HasForeignKey("BandasFavoritasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicStreamer.Domain.Entities.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MusicStreamer.Domain.Entities.Album", b =>
                {
                    b.HasOne("MusicStreamer.Domain.Entities.Banda", "Banda")
                        .WithMany("Albuns")
                        .HasForeignKey("BandaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Banda");
                });

            modelBuilder.Entity("MusicStreamer.Domain.Entities.Assinatura", b =>
                {
                    b.HasOne("MusicStreamer.Domain.Entities.Usuario", "Usuario")
                        .WithOne("Assinatura")
                        .HasForeignKey("MusicStreamer.Domain.Entities.Assinatura", "UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("MusicStreamer.Domain.Entities.Musica", b =>
                {
                    b.HasOne("MusicStreamer.Domain.Entities.Album", "Album")
                        .WithMany("Musicas")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");
                });

            modelBuilder.Entity("MusicStreamer.Domain.Entities.Playlist", b =>
                {
                    b.HasOne("MusicStreamer.Domain.Entities.Usuario", "Usuario")
                        .WithMany("Playlists")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("MusicaPlaylist", b =>
                {
                    b.HasOne("MusicStreamer.Domain.Entities.Musica", null)
                        .WithMany()
                        .HasForeignKey("MusicasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicStreamer.Domain.Entities.Playlist", null)
                        .WithMany()
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MusicaUsuario", b =>
                {
                    b.HasOne("MusicStreamer.Domain.Entities.Musica", null)
                        .WithMany()
                        .HasForeignKey("MusicasFavoritasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicStreamer.Domain.Entities.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MusicStreamer.Domain.Entities.Album", b =>
                {
                    b.Navigation("Musicas");
                });

            modelBuilder.Entity("MusicStreamer.Domain.Entities.Banda", b =>
                {
                    b.Navigation("Albuns");
                });

            modelBuilder.Entity("MusicStreamer.Domain.Entities.Usuario", b =>
                {
                    b.Navigation("Assinatura");

                    b.Navigation("Playlists");
                });
#pragma warning restore 612, 618
        }
    }
}
